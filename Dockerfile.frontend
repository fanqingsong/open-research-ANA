# Next.js Frontend Dockerfile
FROM swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Configure Alpine to use Chinese mirrors for faster downloads
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Configure npm to use Chinese mirrors
RUN npm config set registry https://registry.npmmirror.com

# Install pnpm globally
RUN npm install -g pnpm

# Install dependencies based on the preferred package manager
COPY frontend/package.json frontend/pnpm-lock.yaml* ./
RUN pnpm config set registry https://registry.npmmirror.com && pnpm install --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Configure npm to use Chinese mirrors for builder stage
RUN npm config set registry https://registry.npmmirror.com
RUN npm install -g pnpm

COPY --from=deps /app/node_modules ./node_modules
COPY frontend/ .

# Build the application
RUN pnpm config set registry https://registry.npmmirror.com && pnpm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

CMD ["node", "server.js"]
